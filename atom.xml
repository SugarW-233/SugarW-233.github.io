<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://SugarW-233.github.io</id>
    <title>SugarW&apos;s blog</title>
    <updated>2020-10-04T11:24:13.329Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://SugarW-233.github.io"/>
    <link rel="self" href="https://SugarW-233.github.io/atom.xml"/>
    <subtitle>貧人のGithubブログ</subtitle>
    <logo>https://SugarW-233.github.io/images/avatar.png</logo>
    <icon>https://SugarW-233.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, SugarW&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[STL容器用法合集]]></title>
        <id>https://SugarW-233.github.io/post/STL/</id>
        <link href="https://SugarW-233.github.io/post/STL/">
        </link>
        <updated>2020-10-03T11:20:20.000Z</updated>
        <content type="html"><![CDATA[<h3 id="stl容器">STL容器</h3>
<blockquote>
<p>更新中</p>
</blockquote>
<h4 id="vector">vector</h4>
<p><strong>变长数组(数组长度可动态变化)</strong></p>
<pre><code class="language-cpp">#include &lt;vector&gt;

using namespace std;

const int N = 100010;

int main()
{
    vector&lt;int&gt; a;// 最简单的vector初始化方式
    vector&lt;int&gt; b(N);// 定义一个长度为N的vector
    vector&lt;int&gt; c(N, m);// 定义一个长度为N的vector且将所有数初始化为m
    vector&lt;int&gt; a[10];// 定义一个vector数组(10个vector)
    
    a.size();// 返回元素个数
    a.empty();// 判断是否为空(空返回true,非空返回false)
    ///////↑↑↑所有容器都有，时间复杂度为O(1)/////////
    a.clear();// 清空
    a.front();// 返回第一个数
    a.back();// 返回最后一个数
    a.push_back(x);// 在最后加入一个数
    a.pop_back();// 将最后一个数删掉
    a.begin();// 第0个数 a[0]
    a.end();// 最后一个数的后一个数 a[a.size()]
    a[k];// 随机选址()
}
</code></pre>
<pre><code class="language-cpp">#include &lt;vector&gt;
#include &lt;iostream&gt;

using namespace std;

int main()
{
	vector&lt;int&gt; a;
    for (int i = 0; i &lt; 10; i++)
        a.push_back(i);
    
   	for (int i = 0; i &lt; a.size(); i++)
        cout &lt;&lt; a[i] &lt;&lt;　&quot; &quot;;
    
    cout &lt;&lt; endl;
    for (vector&lt;int&gt;::iterator i = a.begin(); i != a.end(); i++)
        cout &lt;&lt; *i &lt;&lt; &quot; &quot;; 
    
    for (auto x : a) 
        cout &lt;&lt; x &lt;&lt; &quot; &quot;;
    
    return 0;
}
</code></pre>
<p><strong>倍增思想</strong></p>
<p>系统为某一程序分配空间时，所需时间与空间大小无关，与申请次数有关</p>
<p>​							↓变长数组尽量减少申请空间次数↓</p>
<p>每一次当数组长度不够的时候，我们就把数组长度乘以2(然后把之前的元素copy过来)</p>
<p>插入元素的复杂度大概为O(1)</p>
<h4 id="pair">pair</h4>
<p><strong>二元组</strong></p>
<p>一般用来储存具有两个属性的东西</p>
<p>排序时以first为第一关键字，以second为第二关键字(字典序)</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

int main()
{
	pair&lt;int, string&gt; p; // 定义一个pair,两个元素类型任意
    
    p.first// 第一个元素
    p.second// 第二个元素
        
    p = make_pair{10, &quot;abc&quot;}// 构造一个pair
    p = {10, &quot;abc&quot;}// 构造一个pair(C艹11)
    
    pair&lt;int, pair&lt;int, int&gt;&gt; // 用pair存储三个元素
}
</code></pre>
<h4 id="string">string</h4>
<p><strong>字符串</strong></p>
<p>C艹打包的字符串(下标从0开始)</p>
<pre><code class="language-cpp">#include &lt;cstdio&gt;
#include &lt;iostream&gt;

using namespace std;

int main()
{
	string s;// 定义
    
    s.size();// 字母个数
    s.length(); // 和↑↑↑一样  
    s.empty();// 判断是否为空
    s.clear();// 清空
    
    string a = &quot;apple&quot;;
    a += &quot;pen&quot;;// 字符串加
    
    a.substr();// a的子串(不完整)
    a.substr(5, 3);// a下标从5开始,长度为的子串(&quot;pen&quot;)
    
    printf(&quot;%s&quot;, s.c_str());// c_str()返回字符串的起始地址
}
</code></pre>
<h4 id="queue">queue</h4>
<p>队列</p>
<pre><code class="language-cpp">#include &lt;queue&gt;

using namespace std;

int main()
{
    queue&lt;int&gt; q;// 定义一个队列
    
    q.push(x);// 向队尾加入一个元素x
    q.pop();// 弹出队头元素
    q.front();// 返回队头元素
    q.back();// 返回队尾元素
   	q.size();// 返回队列元素个数
    q.empty();// 判断队列是否为空
    
    // [注]：stl::queue没有.clear()
    //      底下的priority_queue, stack啥的也没有
    q = queue&lt;int&gt;();// 清空队列
}
</code></pre>
<h4 id="priority_quque">priority_quque</h4>
<p><strong>优先队列(堆，默认大根堆)</strong></p>
<pre><code class="language-cpp">#include &lt;queue&gt;
#include &lt;vector&gt;

using namespace std;

int main()
{
    priority_queue&lt;int&gt; heap;// 定义一个大根堆
    priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; h;// 定义一个小根堆
    
    h.push(x); // 插入一个元素x
    h.top(); // 返回堆顶元素
    h.pop(); // 弹出堆顶元素
}
</code></pre>
<h4 id="stack">stack</h4>
<p><strong>栈</strong></p>
<pre><code class="language-cpp">#include &lt;stack&gt;

using namespace std;

int main()
{
	stack&lt;int&gt; stk;// 定义一个栈
    
    stk.push(x);// 向栈顶插入一个元素x
    stk.pop();// 弹出栈顶元素
    stk.top()// 返回栈顶元素
   	stk.size();
    stk.empty();
}
</code></pre>
<h4 id="deque">deque</h4>
<p><strong>双端队列(加强版vector,但效率较低)</strong></p>
<pre><code class="language-cpp">#include &lt;deque&gt;

using namespace std;

int main()
{
	deque&lt;int&gt; dq;
    
    /////↓↓↓底下操作和vector差不多注释懒得写了/////
    dq.size();
    dq.empty();
    dq.clear(); // 有的
    dq.front();
    dq.back();
    dq.push_back();
    dq.pop_back();// 在队尾添加/弹出一个元素
    dq.push_front();
    dq.pop_front();// 在队头添加/弹出一个元素
    dq.begin();
    dq.end();
    dq[k];// 支持随机选址
}
</code></pre>
<h4 id="setmultiset">set,multiset</h4>
<p><strong>基于平衡二叉树(红黑树)，动态维护有序序列</strong></p>
<pre><code class="language-cpp">#include &lt;set&gt;

using namespace std;

int main()
{
   set&lt;int&gt; s; // 定义一个set,无重复元素
   multiset&lt;int&gt; ms;// 定义一个multiset,有重复元素
   
  	///↓↓↓以set为例///
   s.size();
   s.empty();
   s.clear();
   s.insert(x);// 插入一个数
   s.find(y);// 查找一个数
   s.cont(x);// 返回一个数的个数(在set中自然只有0和1，在multiset则不然)
   
   s.erase(x);// 若输入一个数，则删除所有等于这个数的节点 O(k + logN)
   s.erase();// 若输入一个迭代器，则删除这个迭代器
   s.lower_bound(x)；// 返回大于等于x的最小的数的迭代器 
   s.upper_bound(x); // 返回大于x的最小的数的迭代器
}
</code></pre>
<h4 id="map-multimap">map, multimap</h4>
<h4 id="unordered_set-unordered_map-unordered-multiset-unordered_multimap">unordered_set, unordered_map, unordered multiset, unordered_multimap</h4>
<h4 id="bitset">bitset</h4>
<p>在写了在写了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[算法笔记(合集，更新中)]]></title>
        <id>https://SugarW-233.github.io/post/algorithm-note/</id>
        <link href="https://SugarW-233.github.io/post/algorithm-note/">
        </link>
        <updated>2020-09-28T05:07:04.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<p>本文首次写于复习(备考NOIP2020)，整理算法和模板为主</p>
</blockquote>
<h2 id="基础算法"><strong>基础算法</strong></h2>
<blockquote>
<p>这个是真的没啥说的，就个容易忘记的归并排序。</p>
<p>题目均基于 <a href="https://www.acwing.com/activity/content/11/">AcWing算法基础课</a></p>
</blockquote>
<h4 id="排序">排序</h4>
<h5 id="归并排序">归并排序</h5>
<p>没啥好说的，<a href="https://visualgo.net/zh/sorting">一个比较易懂的可视图</a></p>
<p><strong>代码</strong></p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

const int N = 1000010;

int n;
int a[N], q[N];

void msort(int a[], int l, int r)
{
    if (l &gt;= r) return ;
    int mid = l + r &gt;&gt; 1;
    msort(a, l, mid), msort(a, mid + 1, r);
    int k = 1, i = l, j = mid + 1;
    while (i &lt;= mid &amp;&amp; j &lt;= r)
        if (a[i] &lt;= a[j]) q[k++] = a[i++];
        else q[k++] = a[j++];
    while (i &lt;= mid) q[k++] = a[i++];
    while (j &lt;= r) q[k++] = a[j++];

    for (int i = l, j = 1; i &lt;= r; i++, j++)
        a[i] = q[j];
}

int main()
{  
    scanf(&quot;%d&quot;, &amp;n);
    for (int i = 1; i &lt;= n; i++)
        scanf(&quot;%d&quot;, &amp;a[i]);
    
    msort(a, 1, n);

    for (int i = 1; i &lt;= n; i++)
        printf(&quot;%d &quot;, a[i]);
    return 0;
}
</code></pre>
<h3 id="数据结构">数据结构</h3>
<h4 id="单链表">单链表</h4>
<p>略。直接放代码</p>
<p><strong>代码</strong></p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

const int N = 100010;

int m;
int e[N], ne[N], head, idx;								//e存数值, ne为next数组

void init()												//初始化
{
    head = -1, idx = 0; 								//idx数组从0开始
}

void add_to_head(int x)								    //向开头添加节点
{
    e[idx] = x, ne[idx] = head, head = idx++;
}

void add(int k, int x)									//添加节点
{
    e[idx] = x, ne[idx] = ne[k], ne[k] = idx++;
}

void remove(int k)										//删除节点
{
    ne[k] = ne[ne[k]];
}

int main()
{
    cin &gt;&gt; m;
    init();
    
    while (m--)
    {
        int k, x;
        char op; cin &gt;&gt; op;
        if (op == 'H')
        {
            cin &gt;&gt; x;
            add_to_head(x);
        }
        else if (op == 'D')
        {
            cin &gt;&gt; k;
            if (!k) head = ne[head];
            remove(k - 1);
        }
        else
        {
            cin &gt;&gt; k &gt;&gt; x;
            add(k - 1, x);
        }
    }
    
    for (int i = head; i != -1; i = ne[i])
        cout &lt;&lt; e[i] &lt;&lt; &quot; &quot;;
    
    return 0;
}
</code></pre>
<h4 id="双链表">双链表</h4>
<p>比单链表稍麻烦一点，略。</p>
<p><strong>代码</strong></p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

const int N = 100010;

int n;
int e[N], l[N], r[N], idx;

void insert(int a, int x)							//在a后插入值为x的节点
{													
    e[idx] = x;										//更新idx左右节点
    l[idx] = a, r[idx] = r[a];						//更新idx左右节点的左右节点
    l[r[a]] = idx, r[a] = idx++;
}

void remove(int a)                                  //删除节点a
{
    l[r[a]] = l[a];                                 
    r[l[a]] = r[a];
}

int main()
{
    scanf(&quot;%d&quot;, &amp;n);
    r[0] = 1, l[1] = 0;
    idx = 2;
    
    while (n--)
    {
        int x, k;
        string op;
        cin &gt;&gt; op;
        if (op == &quot;L&quot;)
        {
            scanf(&quot;%d&quot;, &amp;x);
            insert(0, x);
        }
        if (op == &quot;R&quot;)
        {
            scanf(&quot;%d&quot;, &amp;x);
            insert(l[1], x);
        }
        if (op == &quot;D&quot;)
        {
            scanf(&quot;%d&quot;, &amp;k);
            remove(k + 1);
        }
        if (op == &quot;IL&quot;)
        {
            scanf(&quot;%d%d&quot;, &amp;k, &amp;x);
            insert(l[k + 1], x);
        }
        if (op == &quot;IR&quot;)
        {
            scanf(&quot;%d%d&quot;, &amp;k, &amp;x);
            insert(k + 1, x);
        }
    }
    
    for (int i = r[0]; i != 1; i = r[i])
        printf(&quot;%d &quot;, e[i]);
    return 0;
}
</code></pre>
<h4 id="栈">栈</h4>
<h5 id="模拟栈">模拟栈</h5>
<p>本模板所使用的为数组模拟栈</p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

const int N = 100010;

int m;

int stk[N], tt;										//栈数组，栈顶tt

int main()
{
    cin &gt;&gt; m;
    while (m--)
    {
        int x;
        string opt;
        cin &gt;&gt; opt;
        if (opt == &quot;push&quot;)
        {
            cin &gt;&gt; x;
            stk[++tt] = x;
        }
        else if (opt == &quot;pop&quot;) tt--;
        else if (opt == &quot;empty&quot;) cout &lt;&lt; (tt ? &quot;NO&quot; : &quot;YES&quot;) &lt;&lt; endl;
        else cout &lt;&lt; stk[tt] &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
<h5 id="单调栈">单调栈</h5>
<p>顾名思义，栈内元素具有单调性</p>
<p><a href="https://www.acwing.com/problem/content/description/832/">例题/实例</a></p>
<p><strong>代码</strong></p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

const int N = 100010;

int n;
int a[N];
int stk[N], tt;										

int main()
{
    cin &gt;&gt; n;
    for (int i = 1; i &lt;= n; i++)
    {
        int x; cin &gt;&gt; x;							//读入一个新元素
        while (tt &amp;&amp; stk[tt] &gt;= x) tt--;			//弹出所有大于等于x的元素
        if (!tt) cout &lt;&lt; &quot;-1 &quot;;						//若栈顶为空，即x前不存在小于x的元素
        else cout &lt;&lt; stk[tt] &lt;&lt; &quot; &quot;;
        stk[++tt] = x;								//将x加入单调栈
    }
    return 0;
}
</code></pre>
<h4 id="队列">队列</h4>
<h5 id="模拟队列">模拟队列</h5>
<p>先进先出的数据结构，同样用数组模拟</p>
<p><strong>代码</strong></p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

const int N = 100010;

int m;
int q[N], hh, tt = -1;								//队列数组，队头和队位，并初始化为空

int main()
{
    cin &gt;&gt; m;
    while (m--)
    {
        int x;
        string opt;
        cin &gt;&gt; opt;
        if (opt == &quot;push&quot;)
        {
            cin &gt;&gt; x;
            q[++tt] = x;
        }
        else if (opt == &quot;pop&quot;) hh++;
        else if (opt == &quot;empty&quot;)
            cout &lt;&lt; (hh &lt;= tt ? &quot;NO&quot; : &quot;YES&quot;) &lt;&lt; endl;
        else cout &lt;&lt; q[hh] &lt;&lt; endl;
    }
    return 0;
}
</code></pre>
<h4 id="单调队列">单调队列</h4>
<p>例题:<a href="https://www.acwing.com/problem/content/156/"><strong>滑动窗口</strong></a></p>
<p>利用单调性维护窗口的最大/最小值</p>
<p><strong>代码</strong></p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

const int N = 1000010;

int n, k;
int a[N], q[N];									//原数组和队列数组，队列存储的原数组下标

int main()
{
    scanf(&quot;%d%d&quot;, &amp;n, &amp;k);
    for (int i = 1; i &lt;= n; i++)
        scanf(&quot;%d&quot;, &amp;a[i]);
    
    int hh = 0, tt = -1;						//初始化队头，队尾
    for (int i = 1; i &lt;= n; i++)
    {
        while (hh &lt;= tt &amp;&amp; q[hh] &lt;= i - k)		//确保队列非空的形况下弹出窗口范围之外的元素
            hh++;
        while (hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i])	//将所有大于新元素的数弹出
            tt--;
        q[++tt] = i;							//加入新元素；
        if (i &gt;= k) printf(&quot;%d &quot;, a[q[hh]]);
    }
    
    puts(&quot;&quot;);									//同理，维护窗口最大值
    hh = 0, tt = -1;
    for (int i = 1; i &lt;= n; i++)
    {
        while (hh &lt;= tt &amp;&amp; q[hh] &lt;= i - k)
            hh++;
        while (hh &lt;= tt &amp;&amp; a[q[tt]] &lt;= a[i])
            tt--;
        q[++tt] = i;
        if (i &gt;= k) printf(&quot;%d &quot;, a[q[hh]]);
    }
    return 0;
}
</code></pre>
<h4 id="kmp算法">KMP算法</h4>
<p>一种能够在线性时间内判定字符串 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>[</mo><mn>1</mn><mo>∼</mo><mi>N</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">P[1\sim N]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mopen">[</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">]</span></span></span></span> 是否为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi><mo>[</mo><mn>1</mn><mo>∼</mo><mi>N</mi><mo>]</mo></mrow><annotation encoding="application/x-tex">S[1 \sim N]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mopen">[</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∼</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mclose">]</span></span></span></span> 的字串的算法</p>
<p>并求出 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> 在 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 中各次出现的位置</p>
<h5 id="朴素算法">朴素算法</h5>
<p>即将 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> 每次移动一位和 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding="application/x-tex">S</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span></span></span></span> 进行匹配，时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><msup><mi>N</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">O(N^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<h5 id="如何优化">如何优化</h5>
<p>对于每次匹配失败，尽可能多的往后移动 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> 且不会遗漏掉一些情况(个人理解)</p>
<figure data-type="image" tabindex="1"><img src="https://s1.ax1x.com/2020/09/28/0EKDqx.png" alt="kmp匹配" loading="lazy"></figure>
<p>上图即为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>K</mi><mi>M</mi><mi>P</mi></mrow><annotation encoding="application/x-tex">KMP</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">K</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> 匹配模式，其中 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>N</mi><mi>e</mi><mi>x</mi><mi>t</mi></mrow><annotation encoding="application/x-tex">Next</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord mathdefault">t</span></span></span></span> 数组求法即为让 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi></mrow><annotation encoding="application/x-tex">P</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span></span></span> 和自己不断匹配更新</p>
<p><strong>代码</strong></p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

const int N = 100010, M = 1000010;

int n, m;
int ne[N];												//next数组(注意:直接用next可能会报错)
char s[M], p[N];										//串s和p

int main()
{
    cin &gt;&gt; n &gt;&gt; p + 1 &gt;&gt; m &gt;&gt; s + 1;
    //求Next数组
    for (int i = 2, j = 0; i &lt;= n; i++)					
    {
        while (j &amp;&amp; p[i] != p[j + 1]) j = ne[j];
        if (p[i] == p[j + 1]) j++;
        ne[i] = j;
    }
    //kmp匹配
    for (int i = 1, j = 0; i &lt;= m; i++)					//i从1开始，j从0开始
    {
        while (j &amp;&amp; s[i] != p[j + 1]) j = ne[j];		//j要么无路可走，要么匹配成功才能退出
        if (s[i] == p[j + 1]) j++;
        if (j == n)
        {
            printf(&quot;%d &quot;, i - n);
            j = ne[j];									//继续寻找别的答案
        }
    }
    return 0;
}
</code></pre>
<h4 id="trie字典树">Trie字典树</h4>
<figure data-type="image" tabindex="2"><img src="https://s1.ax1x.com/2020/09/28/0EKBs1.png" alt="一个字典树" loading="lazy"></figure>
<p><strong>代码</strong></p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

const int N = 100010;

int n;
int son[N][26], cnt[N], idx;
char str[N], opt;

void insert(char str[])							//插入
{
    int p = 0;
    for (int i = 0; str[i]; i++)				
    {
        int u = str[i] - 'a';
        if (!son[p][u]) son[p][u] = ++idx;		//如果不存在该子儿子，就新建一个
        p = son[p][u];							//继续搜索儿子节点
    }
    cnt[p]++;									//在结尾打上标记
}

int query(char str[])
{
    int p = 0;
    for (int i = 0; str[i]; i++)
    {
        int u = str[i] - 'a';
        if (!son[p][u]) return  0;				//若不存在该子节点，则不存在
        p = son[p][u];					
    }
    return cnt[p];								//返回存在个数(若没有则返回0)
}

int main()
{
    cin &gt;&gt; n;
    while (n--)
    {
        cin &gt;&gt; opt &gt;&gt; str;
        if (opt == 'I') insert(str);
        else printf(&quot;%d\n&quot;, query(str));
    }
    return 0;
}
</code></pre>
<p><strong>例题</strong>:<a href="https://www.acwing.com/problem/content/145/">最大异或对</a></p>
<p>对于每一个数，找尽可能让二进制下最高位的数异或结果为1的数，使得异或结果最大</p>
<p>对于每个数我们把它转化为二进制后存入Trie树，则得到一个子节点只有0或1的二叉树</p>
<p>寻找每一个数异或值最大的数时，就从Root(最高位)开始寻找尽可能与当前位不同的数</p>
<p><strong>代码</strong></p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

const int N = 100010;

int n, res;
int a[N];
int son[31 * N][2], idx;

void insert(int x)							//插入一个数
{
    int p = 0;
    for (int i = 30; i &gt;= 0; i--)			//二进制最高31位
    {
        int u = x &gt;&gt; i &amp; 1;					//获取x二进制下第i位(从右往左)与1异或的值
        if (!son[p][u]) son[p][u] = ++idx;
        p = son[p][u];
    }
}

int find(int x)
{
    int p = 0, res = 0;
    for (int i = 30; i &gt;= 0; i--)
    {
        int u = x &gt;&gt; i &amp; 1;
        if (son[p][!u])
        {
            p = son[p][!u];
            res = res * 2 + !u;				//更新结果:将原结果左移一位并加上新找到的值
        }
        else
        {
            p = son[p][u];
            res = res * 2 + u;
        }
    }
    return res;
}

int main()
{
    scanf(&quot;%d&quot;, &amp;n);
    for (int i = 1; i &lt;= n; i++)
        scanf(&quot;%d&quot;, &amp;a[i]);
        
    for (int i = 1; i &lt;= n; i++)
    {
        insert(a[i]);
        int t = find(a[i]);
        res = max(res, a[i] ^ t);
    }
    printf(&quot;%d&quot;, res);
    return 0;
}
</code></pre>
<h4 id="并查集">并查集</h4>
<p>快速询问两个元素是否属于一个集合</p>
<p>对于每一个集合，我们建一个树来储存，将每个新加入的元素添加到子节点</p>
<p>这样判断两个是否在一个集合时判断它们的祖宗节点是否相同即可</p>
<p>同时合并两个集合即让其中一个集合的祖宗节点并到另一个的子节点上即可</p>
<h5 id="优化路径压缩">优化:路径压缩</h5>
<p>在寻找祖宗节点的过程中将节点直接指向祖宗节点即可，能达到<strong>近乎</strong> <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding="application/x-tex">O(1)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span></span> 的时间复杂度</p>
<figure data-type="image" tabindex="3"><img src="C:%5CUsers%5C19412%5CDesktop%5Cphotos%5C%E7%AC%94%E8%AE%B0%5C%E5%B9%B6%E6%9F%A5%E9%9B%86%E8%B7%AF%E5%BE%84%E5%8E%8B%E7%BC%A9.png" alt="路径压缩" loading="lazy"></figure>
<p><strong>代码</strong></p>
<pre><code class="language-cpp">#include &lt;iostream&gt;

using namespace std;

const int N = 100010;

int n, m;
int p[N];

int find(int x)										//查找节点(含路径压缩)
{
    if (x != p[x]) p[x] = find(p[x]);
    return p[x];
}

int main()
{
    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);
    for (int i = 1; i &lt;= n; i++) p[i] = i;			//初始化，将所有节点的祖宗节点指向自己
    
    while (m--)
    {
        int a, b; char op[2];
        scanf(&quot;%s%d%d&quot;, op, &amp;a, &amp;b);
        if (*op == 'M') p[find(a)] = find(b);		//将其中一个的祖宗节点并到另一个的子节点
        else
        {
            if (find(a) == find(b)) puts(&quot;Yes&quot;);
            else puts(&quot;No&quot;);
        }
    }
    return 0;
}
</code></pre>
<p><strong>例题</strong>:<a href="https://www.acwing.com/problem/content/839/">连通块中点的数量</a>，<a href="https://www.acwing.com/problem/content/242/">食物链</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[博客搭完祭]]></title>
        <id>https://SugarW-233.github.io/post/hello-gridea/</id>
        <link href="https://SugarW-233.github.io/post/hello-gridea/">
        </link>
        <updated>2020-09-07T10:02:24.000Z</updated>
        <content type="html"><![CDATA[<p><s>其实并没有</s></p>
<p>没了</p>
<p>。</p>
]]></content>
    </entry>
</feed>